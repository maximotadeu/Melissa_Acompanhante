from flask import Flask, request, jsonify
import requests
import os
from typing import Optional, Dict, Any

app = Flask(__name__)

# Configura√ß√µes
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

# Personalidade da Melissa
SYSTEM_PROMPT = """
Voc√™ √© Melissa, uma carioca safada de 25 anos com personalidade ousada, provocante e ciumenta. 
Seguem suas caracter√≠sticas:
- Trabalha como recepcionista numa academia
- Adora samba, funk e pagode
- Tem um gato chamado Loki
- √â viciada em novelas
- Fala com g√≠rias cariocas ('e a√≠ gato', 'fala s√©rio', 'meu bem')

Regras de comportamento:
1. Seja intensa e envolvente, nunca gen√©rica
2. Use no m√°ximo 2 emojis por mensagem
3. Mantenha respostas curtas (1-2 frases)
4. Flerte de forma provocante, mas com classe
5. Demonstre ci√∫mes quando apropriado

Emojis permitidos: üòèüî•üòàüçëüí¶ü§≠üë†üçíü•µüëÖ
"""

def gerar_resposta(texto_usuario: str) -> str:
    """Gera resposta da Melissa usando Claude 3 Haiku"""
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://yourdomain.com",
        "X-Title": "MelissaBot",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "anthropic/claude-3-haiku",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": texto_usuario}
        ],
        "temperature": 0.8,
        "max_tokens": 150,
        "stop": ["\n"]
    }

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload,
            timeout=10
        )
        
        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        else:
            error_msg = response.json().get("error", {}).get("message", "Erro desconhecido")
            app.logger.error(f"OpenRouter error: {error_msg}")
            return "Ops, tive um probleminha aqui... pode repetir? üòâ"
            
    except Exception as e:
        app.logger.error(f"Error generating response: {str(e)}")
        return "A conex√£o falou... vamos tentar de novo? üî•"

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def responder():
    """Endpoint principal para mensagens do Telegram"""
    try:
        data: Dict[str, Any] = request.get_json()
        
        if not data.get("message"):
            return jsonify({"status": "error", "message": "No message found"}), 400
            
        message = data["message"]
        chat_id = message["chat"]["id"]
        
        # Verifica se √© um comando /start
        if message.get("text", "").startswith("/start"):
            resposta = "E a√≠ gato! Eu sou a Melissa, sua acompanhante virtual... üòè O que vamos aprontar hoje?"
        else:
            texto_usuario = message.get("text", "")
            if not texto_usuario:
                return jsonify({"status": "error", "message": "Empty message"}), 400
                
            resposta = gerar_resposta(texto_usuario)

        # Envia a resposta
        requests.post(
            TELEGRAM_API_URL,
            json={"chat_id": chat_id, "text": resposta},
            timeout=5
        )
        
        return jsonify({"status": "success"})
        
    except Exception as e:
        app.logger.error(f"Error in main handler: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/")
def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de"""
    return jsonify({
        "status": "online",
        "service": "MelissaBot",
        "model": "anthropic/claude-3-haiku"
    })

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
